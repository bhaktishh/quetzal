type Vect(Nat n, Ty t) {
    constructor Nil() of Vect(0, t);
    constructor Cons(t head, Vect(n, t) tail) of Vect(1+n, t);
}

type Pair(Ty a, Func(a => Ty) p) {
    constructor MkPair (a x, p(t) y) of Pair(a, p);
}

record DPairRec(Ty t, Func(t a => Ty) p) {
    t fst; 
    p(fst) snd;
}

func add5(Nat x) of Nat {
    x = x + 5; 
    return x; 
}

func test<>() of Void {}

func append<Nat n, Nat m, Ty t> (Vect(t, n) v1, Vect(t, m) v2) of Vect(t, n+m) {
    switch (v1, v2) {
        case (Nil(), v2) {
            return v2;
        }
        case (Cons(x, xs), v2) {
            let v3 = append(xs, v2);
            return Cons(x, v3);
        }   
    }
}

func replicate<Ty t>(t x, Nat n) of Vect(t, n) {
    switch(n) {
        case (0) {return Nil;}
        case (S(n)) {return Cons (x, replicate(x,n));}
    }
}

func testLoop (Nat n) of Nat {
    let Nat x = 11;
    x = 12; 
    if (x < 10) {
        while (n < 10) {
            x = x + 1;
            n = n + 4;
        }
        n = n + 1;
        return n;
    }
    else {
        n = n + 2; 
        return n + 4;
    }
}

func test2Loops (Nat n) of Nat {
    let Nat x = 11; 
    while (n < x) {
        n = n + 1; 
    }
    let Nat y = 12;
    while (n < 20) {
        n = n + 1;
    }
    return n;
}

func testNestedLoops (Nat n) of Nat {
    let Nat x = 11; 
    while (n < x) {
        n = n + 1; 
        n = n + 3;
        let Nat m = n;
        while (m < x) {
            m = m + 1;
        }
    }
    return n;
}

 func isPrime (Nat n) of Bool {
    let Nat i = 2;
    while (i < n) {
        if (0 < n) {
i = i + 1;         } else {
i = i + 2;         }
        i = i + 1; 
    }
    switch (n) {
        case (0) {
            i = i + 3; 
        }
        case (n) {
            i = i + 6; 
        }
    }
    return True;
}

func binSearch (Nat key, Vect(Nat, n) v) of Nat {
    let Nat low = 0;
    let Nat high = n - 1; 
    let Nat mid = 0;
    let Nat x = 0; 
    while (low < (high + 1)) {
        mid = (low + high) / 2;
        x = index(v, mid); 
        if (key == x) {
            ;;
        } else {
            if (key < x) {
                high = mid - 1;
            } else {
                low = mid + 1; 
            }
            mid = 0;
        }
    }
    return mid; 
}

import Data.Vect
import Data.Nat
import Decidable.Equality

func search (Nat n, Vect(n, Nat) ls, Nat x) of Maybe(Fin(n)) {
    let Nat i = 0;
    let Maybe(Fin(n)) ret = Nothing; 
    ewhile(i < n) {
        eif ((index(natToFinLT(i), ls)) == x) {
            ret = Just((natToFinLT(i))); 
        }
        else {;;}
        i = 1 + i; 
    }
    return ret; 
}

type Dir {
    constructor Write of Dir;
    constructor Read of Dir;
}

type Expr (Dir d) {
    constructor Lam (String x, Expr(d) e) of Expr(Write);
    constructor Val (Int i) of Expr(d); 
    constructor Proc (String x) of Expr(Read); 
}